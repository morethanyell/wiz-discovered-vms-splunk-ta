{"basic_builder": {"appname": "TA-wiz-discovered-vms", "friendly_name": "Wiz Discovered VMs", "version": "1.2.0", "author": "morethanyell", "description": "Extracts dumps of virtual machines discovered by Wiz.", "theme": "#0254ec", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABH5JREFUWEftl31QVFUYxp+79+7uZdlllyijMmdBAiloQsEJkdEaJtGx0TEtDRqmEguFsn82QaCBgdlcrEl3yIqcMUfTakRJrKDEcGqkQWocjMYPKnTMBnfcD5a733fr3svXwt1dbWqgmX3/2j3n3HN/53mfc95zCXq9yc+ymDFBUOtMftY/Y3gQAQqXi4hCEYXCKRCuP+KhiQol3yPBxeuBp/K0KZQ7j0L5mig81TAEh2ccc1qAMrQSGDcqkZFIwXDUgYYWBxi3ADUVaGIZIcJYcHQsN27ib+6xUOWIADQKAqX5ctQ1OwNeMgXoRLkK8xMp/DboQ06lDf6Rid/bFA3dfgY2p9DwZkEUipbS4OrgogoLuvQavn1HM4OU+ymszpIFXU31JwyavnFBIcOYMqODpwBtXibn5eRAllZZ8d0FL9LnkPixQY3ygwx2fu4ELQX6G2MRHyvB8W4XCnfbYdl/BwiCQPXHw3g4gcLabLko0O+DPqS/ZpkCEhQoTkng1z2xUNIEPmh3oKRpGE0vKfFCHo2BGz6kvmLB8gwpjuhi+DnW7RxC+zl3AFD/IIu0OZTgCQIozpMjTiXh/7/YaMe+b11B1RM19aGtSjydI4eNYZGz3YqzBg3kUsFQRbuHsCFXjvwMGQatLBJLzCBJBADVHx33RfYDJE7XqyEhCPT0e/BouY1Pc7AQBXo8jUJ7dQyfgot/eJF8r7BaLq6afJillvCAb/29O3QHGChpcSBuCScqVFiWIfjpiVorTvZ6Q+4UUSBSAvyyS4O58eTYwx29bix5SAaujwuW9SNTZ8W5AV9QoJxkEp11Gj5tx7vdWG0YCgnDpzjYjbHmmShUrlXwE5hsLJJLLfioTIknR3ZPT78XC1+3AgREgTiIr6tUeCxdBo/PjyydFb1XfP8cSHuXBBeMGlAkgTcOM6g74sCCBBJn9GqQJIFNe+zY2yGYUyxlS1IpnKxR8+q83yZsjonB2UEsQp7UX25XYcFcCklbLLA5BCe26LhVS6EtMeOmXWibDKQ/5sSpmhgsTpXy/cNOP1yecSe3/eRGoTEQcBQuJFDBYhm0s0jUNzvGFjM/gUTZChrPN45POBmo67IXbVWCOmLR2u3CKoP99hWSUwAtJWAdUWd0hjtVBExD4yvmjL4qU1Cj76oPtIxAwt0j7hd57Z9mP85cEt9t01JcQzn7/wv0bnE0b+xtBxg8oiXRsi0GKWVmdNSowbj8WJRCYeAGC+MXTugLFfD4gDUGG073hT4IJ6t1ywqtzJThw5ejEb/RDH2BgvfI+rft6NulwanzHlQcZNClV+PaTRYF79ix4zkFZsdJkFdjC3v2BBwHt/Mpfa0pFkVGO5pKlCjbO4zWs24eqPZTBoe/d/Nl4odLXtR+5kDpchqb82k8+KrlvwOq26BAdjKFebNJ3FdsFnbVdAKl8fciDQzHHKg8xEw/EEewdSWN1h4PLl8X6tKWfBqdfR6cv+LDs7ly3kOdP3uwMIlCVhKFxq8Cr6jh8nfLpg430b/VHwEKp+SMU+gvO1VNbaLe6IIAAAAASUVORK5CYII=", "visible": true, "tab_version": "4.4.1", "tab_build_no": "0", "build_no": 3}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "wiz:virtualmachines", "interval": "43200", "use_external_validation": true, "streaming_mode_xml": true, "name": "wiz_virtual_machines", "title": "Wiz Virtual Machines", "description": "Wiz-discovered virtual machines", "type": "customized", "parameters": [{"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "project_id", "label": "Project ID", "help_string": "Enter the Wiz Project ID to narrow down your report. Leave the asterisk (*) to select all projects.", "required": true, "format_type": "text", "default_value": "*", "placeholder": "", "type": "text", "value": "*"}, {"name": "api_endpoint_url", "label": "API Endpoint URL", "help_string": "Example: https://api.us5.app.wiz.io/graphql", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "https://api.us5.app.wiz.io/graphql"}, {"name": "token_url", "label": "Token URL", "help_string": "https://auth.app.wiz.io/oauth/token", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "https://auth.app.wiz.io/oauth/token"}], "data_inputs_options": [{"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "project_id", "title": "Project ID", "description": "Enter the Wiz Project ID to narrow down your report. Leave the asterisk (*) to select all projects.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "*", "placeholder": ""}, {"type": "customized_var", "name": "api_endpoint_url", "title": "API Endpoint URL", "description": "Example: https://api.us5.app.wiz.io/graphql", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "token_url", "title": "Token URL", "description": "https://auth.app.wiz.io/oauth/token", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "# encoding = utf-8\n\nimport os\nimport sys\nfrom os import system\nimport time\nimport requests\nimport csv\nimport json\nimport socket\nfrom io import StringIO\nfrom string import Template\nimport gc\n\ndef validate_input(helper, definition):\n    pass\n\ndef get_wiz_access_token(helper, token_url, client_id, client_secret):\n    \"\"\"\n    Authenticate to Wiz API and get the access token.\n\n    Args:\n    client_id (str): The client ID.\n    client_secret (str): The client secret.\n\n    Returns:\n    str: The access token if authentication is successful, None otherwise.\n    \"\"\"\n    \n    url = token_url\n    \n    helper.log_info(f\"Obtaining access token for {client_id[:6]}...{client_id[-6:]}...\")\n    \n    payload = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'audience': 'wiz-api'\n    }\n    \n    headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n    \n    response = requests.post(url, data=payload, headers=headers)\n    \n    if response.status_code == 200:\n        token_data = response.json()\n        helper.log_info(f\"Access token for {client_id[:6]}...{client_id[-6:]} was successfully obtained.\")\n        return token_data['access_token']\n    else:\n        helper.log_error(f\"Failed to obtain access token. Status Code: {response.status_code}. Response: {response.text}\")\n        return None\n\ndef create_cloud_resource_inventory_report(helper, api_url, bearer_token, project_id, report_name):\n    \n    headers = {\n        'Authorization': f'bearer {bearer_token}',\n        'Content-Type': 'application/json'\n    }\n    \n    query = {\n        \"query\": \"mutation CreateReport($input: CreateReportInput!) {   createReport(input: $input) {     report {       id     }   } }\",\n        \"variables\": {\n            \"input\": {\n                \"name\": f\"{report_name}\",\n                \"type\": \"CLOUD_RESOURCE\",\n                \"projectId\": f\"{project_id}\",\n                \"cloudResourceParams\": {\n                        \"includeCloudNativeJSON\": True,\n                        \"includeWizJSON\": True,\n                        \"entityType\": [\n                            \"VIRTUAL_MACHINE\"\n                        ]\n                }\n            }\n        }\n    }\n    \n    helper.log_info(f\"Creating report: {report_name}. Filter projectId={project_id}\")\n    \n    response = requests.post(api_url, json=query, headers=headers)\n    \n    if response.status_code > 299:\n        helper.log_error(f\"Failed to create report. Status Code: {response.status_code}. Response: {response.text}\")\n        return None\n\n    rid = response.json()['data']['createReport']['report']['id']\n    helper.log_info(f\"Report: {report_name} successfully created, id={rid}.\")\n    return rid\n\ndef get_cloud_resource_inventory_report(helper, api_url, bearer_token, rn, report_id):\n    \n    headers = {\n        'Authorization': f'bearer {bearer_token}',\n        'Content-Type': 'application/json'\n    }\n    \n    query = {\n        \"query\": \"query ReportDownloadUrl($reportId: ID!) {   report(id: $reportId) {     lastRun {       url       status     }   } }\",\n        \"variables\": {\n            \"reportId\": f\"{report_id}\"\n        }\n    }\n    \n    data = []\n    retry_counter = 0\n    \n    helper.log_info(f\"Obtaining status for report: {rn} ({report_id})\")\n    \n    response = requests.post(api_url, json=query, headers=headers)\n    \n    if response.status_code > 200:\n        helper.log_error(f\"Failed to retrieve report. Status Code: {response.status_code}. Response: {response.text}\")\n        return None\n        \n    report_state = response.json()['data']['report']['lastRun']['status']\n    \n    while report_state != \"COMPLETED\":\n        \n        helper.log_info(f\"Report status is {report_state}, sleeping for now...\")\n        time.sleep(10)\n        response = requests.post(api_url, json=query, headers=headers)\n        \n        retry_counter = retry_counter + 1\n        \n        if retry_counter > 99:\n            helper.log_error(f\"Too many attempts made to retrieve the report {report_id}. This collection will end without success.\")\n            return None\n        \n        if response.status_code == 200:\n            report_state = response.json()['data']['report']['lastRun']['status']\n    \n    helper.log_info(f\"Report status is {report_state}. Retrieving report as CSV (non-disk, ephemeral).\")\n    \n    report_url = response.json()['data']['report']['lastRun']['url']\n    \n    report_csv = requests.get(report_url)\n    \n    if report_csv.status_code > 299:\n        helper.log_error(f\"Failed to retrieve report. Status Code: {response.status_code}. Response: {response.text}\")\n        return None\n        \n    helper.log_info(f\"CSV retrieval was successful. Now parsing data...\")\n    \n    content = report_csv.content.decode('utf-8')\n    csv_data = StringIO(content)\n    reader = csv.DictReader(csv_data)\n    \n    for row in reader:\n        \n        column_value = row['Cloud Native JSON']\n\n        try:\n            json_object = json.loads(column_value)\n            json_object['lastSeen'] = row['Last Seen']\n            json_object['subscriptionID'] = row['Subscription ID']\n            json_object['projects'] = row['Projects']\n            json_object['region'] = row['Region']\n            json_object['wizJsonObject'] = row['Wiz JSON Object']\n            data.append(json_object)\n        except json.JSONDecodeError as e:\n            helper.log_error(f\"Failed to decode JSON. {e}\")\n    \n    del csv_data\n    del reader\n    gc.collect()\n    \n    return data\n\ndef collect_events(helper, ew):\n    \n    global_account = helper.get_arg('global_account')\n    CLIENT_ID = global_account['username']\n    CLIENT_SECRET= global_account['password']\n    url = helper.get_arg(\"api_endpoint_url\")\n    token_url = helper.get_arg(\"token_url\")\n    project_id = helper.get_arg('project_id')\n    \n    current_epoch = int(time.time())\n    this_hostname = socket.gethostname()\n    name = helper.get_input_stanza_names()\n    rn = f\"from_Splunk_TA-wiz-discovered-vms_{this_hostname}_{name}_{str(current_epoch)}\"\n    \n    log_level = helper.get_log_level()\n    helper.set_log_level(log_level)\n    helper.log_info(f\"Logging level is set to: {log_level}\")\n    \n    helper.log_info(f\"Wiz authentication begins here...\")\n    token = get_wiz_access_token(helper, token_url, CLIENT_ID, CLIENT_SECRET)\n    \n    helper.log_info(f\"Report creation phase begins here...\")\n    report_id = create_cloud_resource_inventory_report(helper, url, token, project_id, rn)\n    \n    if report_id is None:\n        helper.log_error(f\"Exiting due to failure to create report.\")\n        sys.exit(1)\n    \n    meta_source = f\"wiz_report_id://{report_id}\"\n    \n    helper.log_info(f\"Report creation was successful, now awaiting report run completion.\")\n    \n    data = get_cloud_resource_inventory_report(helper, url, token, rn, report_id)\n        \n    if data is None:\n        helper.log_error(f\"Exiting due to failure to retrieve report id {report_id}.\")\n        sys.exit(1)\n        \n    helper.log_info(f\"Collected {len(data)} VMs. Event ingestion phase begins here...\")\n    \n    for d in data:\n        data_event = json.dumps(d, separators=(',', ':'))\n        event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), host=url, data=data_event)\n        ew.write_event(event)\n    \n    helper.log_info(f\"End of collection for report {report_id}.\")\n    \n", "customized_options": [{"name": "global_account", "value": "account0"}, {"name": "project_id", "value": "*"}, {"name": "api_endpoint_url", "value": "https://api.us5.app.wiz.io/graphql"}, {"name": "token_url", "value": "https://auth.app.wiz.io/oauth/token"}], "uuid": "8f2aa7e1b0684d868cbda8ac337a73de", "sample_count": "6633"}]}, "field_extraction_builder": {"wiz:virtualmachines": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"wiz:virtualmachines": {"metadata": {"data_input_name": "wiz_virtual_machines"}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1719503086_92"}}